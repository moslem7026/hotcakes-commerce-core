!function (t) { "use strict"; if ("undefined" == typeof jQuery) throw new Error("angular-confirm requires jQuery"); if (void 0 === t) throw new Error("angular-confirm requires Angular"); t.module("cp.ngConfirm", []).service("$ngConfirmTemplate", function () { this.default = '<div class="ng-confirm"><div class="ng-confirm-bg ng-confirm-bg-h"></div><div class="ng-confirm-scrollpane"><div class="ng-bs3-container"><div class="ng-bs3-row"><div class="ng-confirm-box-p"><div class="ng-confirm-box" role="dialog" aria-labelledby="labelled" tabindex="-1"><div class="ng-confirm-closeIcon"></div><div class="ng-confirm-title-c"><span class="ng-confirm-icon-c"><i></i></span><span class="ng-confirm-title"></span></div><div class="ng-confirm-content-pane"><div class="ng-confirm-content"></div></div><div class="ng-confirm-buttons"></div><div class="ng-confirm-clear"></div></div></div></div></div></div></div>' }).service("$ngConfirmDefaults", function () { return { title: "Hello", titleClass: "", type: "default", typeAnimated: !0, content: "Are you sure to continue?", contentUrl: !1, defaultButtons: { ok: function () { } }, icon: "", theme: "white", bgOpacity: null, animation: "zoom", closeAnimation: "scale", animationSpeed: 400, animationBounce: 1.2, scope: !1, escapeKey: !1, rtl: !1, buttons: {}, container: "body", containerFluid: !1, backgroundDismiss: !1, backgroundDismissAnimation: "shake", alignMiddle: !0, offsetTop: 50, offsetBottom: 50, autoClose: !1, closeIcon: null, closeIconClass: !1, columnClass: "small", boxWidth: "50%", useBootstrap: !0, bootstrapClasses: { container: "container", containerFluid: "container-fluid", row: "row" }, onScopeReady: function () { }, onReady: function () { }, onOpenBefore: function () { }, onOpen: function () { }, onClose: function () { }, onDestroy: function () { }, onAction: function () { } } }).service("$ngConfirm", ["$rootScope", "$ngConfirmDefaults", "$ngConfirmBase", function (i, s, e) { return function (i, n, o) { return "string" == typeof i && ((i = { content: i, buttons: s.defaultButtons }).title = "string" == typeof n && n || !1, "object" == typeof n && (i.scope = n), "object" == typeof o && (i.scope = o)), void 0 === i && (i = {}), i = t.extend({}, s, i), new e(i) } }]).factory("$ngConfirmBase", ["$rootScope", "$ngConfirmDefaults", "$timeout", "$compile", "$ngConfirmTemplate", "$interval", "$templateRequest", "$log", "$q", function (i, s, e, n, o, a, c, l, r) { var h = function (i) { t.extend(this, i), this._init() }; return h.prototype = { _init: function () { this._lastFocused = t.element("body").find(":focus"), this._id = Math.round(999999 * Math.random()), this.open() }, _providedScope: !1, _prepare: function () { var s = this; this.$el = t.element(o.default), s.scope ? this._providedScope = !0 : (this._providedScope = !1, s.scope = i.$new()), "function" == typeof this.onScopeReady && this.onScopeReady.apply(this, [this.scope]), this.$confirmBox = this.$el.find(".ng-confirm-box"), this.$confirmBoxParent = this.$el.find(".ng-confirm-box-p"), this.$titleContainer = this.$el.find(".ng-confirm-title-c"), this.$title = this.$el.find(".ng-confirm-title"), this.$icon = this.$el.find(".ng-confirm-icon-c"), this.$content = this.$el.find(".ng-confirm-content"), this.$confirmBg = this.$el.find(".ng-confirm-bg"), this.$contentPane = this.$el.find(".ng-confirm-content-pane"), this.$closeIcon = this.$el.find(".ng-confirm-closeIcon"), this.$bs3Container = this.$el.find(".ng-bs3-container"), this.$buttonContainer = this.$el.find(".ng-confirm-buttons"), this.$scrollPane = this.$el.find(".ng-confirm-scrollpane"); var e = "ng-confirm-box" + this._id; if (this.$confirmBox.attr("aria-labelledby", e), this.$content.attr("id", e), this._setAnimationClass(this.animation), this.setDismissAnimation(this.backgroundDismissAnimation), this.setTheme(this.theme), this.setType(this.type), this._setButtons(this.buttons), this.setCloseIcon(this.closeIcon), this.setCloseIconClass(this.closeIconClass), this.setTypeAnimated(this.typeAnimated), this.useBootstrap ? (this.setColumnClass(this.columnClass), this.$el.find(".ng-bs3-row").addClass(this.bootstrapClasses.row).addClass("justify-content-md-center justify-content-sm-center justify-content-xs-center justify-content-lg-center"), this.setContainerFluid(this.containerFluid)) : this.setBoxWidth(this.boxWidth), this.setTitleClass(this.titleClass), this.setTitle(this.title), this.setIcon(this.icon), this.setBgOpacity(this.bgOpacity), this.setRtl(this.rtl), this._contentReady = r.defer(), this._modalReady = r.defer(), r.all([this._contentReady.promise, this._modalReady.promise]).then(function () { s.isAjax && (s.setContent(s.content), s.loading(!1)), "function" == typeof s.onReady && s.onReady.apply(s, [s.scope]) }), this.contentUrl) { this.loading(!0), this.isAjax = !0; var n = this.contentUrl; "function" == typeof this.contentUrl && (n = this.contentUrl()), this.isAjaxLoading = !0, c(n).then(function (t) { s.content = t, s._contentReady.resolve(), s.isAjaxLoading = !1 }, function () { s.content = "", s._contentReady.resolve(), s.isAjaxLoading = !1 }) } else { var a = this.content; "function" == typeof this.content && (a = this.content()), this.content = a, this.setContent(this.content), this._contentReady.resolve() } "none" == this.animation && (this.animationSpeed = 1, this.animationBounce = 1), this.$confirmBg.css(this._getCSS(this.animationSpeed, 1)) }, isAjax: !1, isAjaxLoading: !1, isLoading: !1, _hideClass: "ng-confirm-el-hide", _loadingClass: "ng-confirm-loading", loading: function (t) { this.isLoading = t, t ? this.$confirmBox.addClass(this._loadingClass) : this.$confirmBox.removeClass(this._loadingClass) }, setContent: function (t) { if (this.$content) { var i = n(t = "<div>" + t + "</div>")(this.scope); this.$content.append(i) } else l.error("Attempted to set content before $content is defined") }, _typeList: ["default", "blue", "green", "red", "orange", "purple", "dark"], _typePrefix: "ng-confirm-type-", _pSetType: "", setType: function (t) { if (-1 == this._typeList.indexOf(t.toLowerCase())) return l.warn("Invalid dialog type: " + t), !1; var i = this._typePrefix + t; this.$el.removeClass(this._pSetType).addClass(i), this._pSetType = i }, _setTypeAnimatedClass: "ng-confirm-type-animated", setTypeAnimated: function (t) { t ? this.$confirmBox.addClass(this._setTypeAnimatedClass) : this.$confirmBox.removeClass(this._setTypeAnimatedClass) }, _pTitleClass: "", setTitleClass: function (t) { this.$titleContainer.removeClass(this._pTitleClass).addClass(t), this._pTitleClass = t }, setBoxWidth: function (t) { this.useBootstrap ? l.warn("Cannot set boxWidth as useBootstrap is set to true. use columnClass instead.") : this.$confirmBox.css("width", t) }, setContainerFluid: function (t) { this.useBootstrap ? (t ? this.$bs3Container.removeClass(this.bootstrapClasses.container).addClass(this.bootstrapClasses.containerFluid) : this.$bs3Container.removeClass(this.bootstrapClasses.containerFluid).addClass(this.bootstrapClasses.container), this.containerFluid = t) : l.warn("Cannot set containerFluid as useBootstrap is set to false.") }, _pSetColumnClass: "", setColumnClass: function (t) { if (this.useBootstrap) { var i; switch (t = t.toLowerCase()) { case "xl": case "xlarge": i = "col-md-12"; break; case "l": case "large": i = "col-md-8 col-md-offset-2"; break; case "m": case "medium": i = "col-md-6 col-md-offset-3"; break; case "s": case "small": i = "col-md-4 col-md-offset-4 col-sm-6 col-sm-offset-3 col-xs-10 col-xs-offset-1"; break; case "xs": case "xsmall": i = "col-md-2 col-md-offset-5"; break; default: i = t }this.$confirmBoxParent.removeClass(this._pSetColumnClass).addClass(i), this._pSetColumnClass = i } else l.warn("Cannot set columnClass as useBootstrap is set to false, use bixWidth instead") }, setIcon: function (i) { "function" == typeof i && (i = i()), i ? (this.$icon.html(t.element("<i></i>").addClass(i)), this.$icon.removeClass(this._hideClass)) : this.$icon.addClass(this._hideClass), this.icon || this.title ? this.$titleContainer.removeClass(this._hideClass) : this.$titleContainer.addClass(this._hideClass), this.icon = i }, setTitle: function (t) { "function" == typeof t && (t = t()), t ? (this.$title.html(t), this.$title.removeClass(this._hideClass)) : this.$title.addClass(this._hideClass), this.icon || this.title ? this.$titleContainer.removeClass(this._hideClass) : this.$titleContainer.addClass(this._hideClass), this.title = t }, setCloseIcon: function (t) { 0 == this._buttonCount && null == t && (t = !0), t ? this.$closeIcon.removeClass(this._hideClass) : this.$closeIcon.addClass(this._hideClass), this.closeIcon = t }, setCloseIconClass: function (i) { var s; s = i ? t.element("<i></i>").addClass(this.closeIconClass) : t.element("<span>&times;</span>").addClass(this.closeIconClass), this.$closeIcon.html(s), this.closeIconClass = i }, _animationPrefix: "ng-confirm-animation-", _pSetAnimation: "", _setAnimationClass: function (t) { var i = this._prefixThis(t, this._animationPrefix); this.$confirmBox.removeClass(this._pSetAnimation).addClass(i), this._pSetAnimation = i }, _removeAnimationClass: function () { this.$confirmBox.removeClass(this._pSetAnimation), this._pSetAnimation = "" }, _bgDismissPrefix: "ng-confirm-hilight-", _pSetDismissAnimation: "", setDismissAnimation: function (t) { var i = this._prefixThis(t, this._bgDismissPrefix); this.$confirmBox.removeClass(this._pSetDismissAnimation).addClass(i), this._pSetDismissAnimation = i }, _prefixThis: function (i, s) { return i = i.split(","), t.forEach(i, function (t, e) { -1 == t.indexOf(s) && (i[e] = s + t.trim()) }), i.join(" ").toLowerCase() }, _setButtons: function (i) { var s = this; "object" != typeof i && (i = {}), t.forEach(i, function (e, n) { "function" == typeof e && (i[n] = e = { action: e }), i[n].text = e.text || n, i[n].btnClass = e.btnClass || "btn-default", i[n].action = e.action || t.noop, i[n].keys = e.keys || [], i[n].disabled = e.disabled || !1, void 0 === e.show && (e.show = !0), i[n].show = e.show, t.forEach(i[n].keys, function (t, s) { i[n].keys[s] = t.toLowerCase() }); var o = t.element('<button type="button" class="btn"><span class="ng-confirm-btn-text"></span></button>'); i[n].setText = function (t) { o.find(".ng-confirm-btn-text").html(t) }, i[n].setBtnClass = function (t) { o.removeClass(i[n].btnClass).addClass(t), i[n].btnClass = t }, i[n].setDisabled = function (t) { t ? o.attr("disabled", "disabled") : o.removeAttr("disabled"), i[n].disabled = t }, i[n].setShow = function (t) { t ? o.removeClass(s._hideClass) : o.addClass(s._hideClass), i[n].show = t }, i[n].setText(i[n].text), i[n].setBtnClass(i[n].btnClass), i[n].setDisabled(i[n].disabled), i[n].setShow(i[n].show), o.click(function (t) { t.preventDefault(), s.triggerButton(n) }), i[n].el = o, s.$buttonContainer.append(o) }), this.buttons = i, this._buttonCount = Object.keys(i).length }, _buttonCount: 0, _themePrefix: "ng-confirm-", _pSetTheme: "", setTheme: function (t) { var i = this._prefixThis(t, this._themePrefix); this.$el.removeClass(this._pSetTheme).addClass(i), this._pSetTheme = i }, _rtlClass: "ng-confirm-rtl", setRtl: function (t) { t ? this.$el.addClass(this._rtlClass) : this.$el.removeClass(this._rtlClass), this.rtl = t }, setBgOpacity: function (t) { this.$confirmBg.css("opacity", t), this.bgOpacity = t }, _cubic_bezier: "0.36, 0.55, 0.19", _getCSS: function (t, i) { return { "-webkit-transition-duration": t / 1e3 + "s", "transition-duration": t / 1e3 + "s", "-webkit-transition-timing-function": "cubic-bezier(" + this._cubic_bezier + ", " + i + ")", "transition-timing-function": "cubic-bezier(" + this._cubic_bezier + ", " + i + ")" } }, _hash: function (t) { var i = t.toString(), s = 0; if (0 == i.length) return s; for (var e = 0; e < i.length; e++) { s = (s << 5) - s + i.toString().charCodeAt(e), s &= s } return s }, _digestWatchUnRegister: !1, _bindEvents: function () { var i = this; this._digestWatchUnRegister = this.scope.$watch(function () { i.setDialogCenter("Digest watcher") }), this.$closeIcon.on("click." + i._id, function () { i._closeClick() }), t.element(window).on("resize." + i._id, function () { i.setDialogCenter("Window Resize") }), t.element(window).on("keyup." + i._id, function (t) { i._reactOnKey(t) }), this.$scrollPane.on("click", function () { i._scrollPaneClick() }), this.$confirmBox.on("click", function () { i.boxClicked = !0 }) }, _unBindEvents: function () { t.element(window).off("resize." + this._id), t.element(window).off("keyup." + this._id), this.$closeIcon.off("click." + this._id), this._digestWatchUnRegister && this._digestWatchUnRegister() }, _reactOnKey: function (i) { var s = this, e = t.element(".ng-confirm"); if (e.eq(e.length - 1)[0] !== this.$el[0]) return !1; var n = i.which; if (!$(this.$el).find(":input").is(":focus") || !/13|32/.test(n)) { var o = this._getKey(n); if ("esc" === o && this.escapeKey) if (1 == this.escapeKey) this._scrollPaneClick(); else if ("string" == typeof this.escapeKey || "function" == typeof this.escapeKey) { var a = !1; (a = "function" == typeof this.escapeKey ? this.escapeKey() : this.escapeKey) && (t.isDefined(this.buttons[a]) ? this._buttonClick(a) : l.warn("Invalid escapeKey, no buttons found with name " + a)) } t.forEach(this.buttons, function (t, i) { -1 != t.keys.indexOf(o) && s._buttonClick(i) }) } }, _scrollPaneClick: function () { if (this.boxClicked) return this.boxClicked = !1, !1; var i, s = !1, e = !1; if ("string" == typeof (i = "function" == typeof this.backgroundDismiss ? this.backgroundDismiss() : this.backgroundDismiss) && t.isDefined(this.buttons[i]) ? (s = i, e = !1) : e = void 0 === i || 1 == !!i, s) { var n = this.buttons[s].action.apply(this, [this.scope, this.buttons[s]]); e = void 0 === n || !!n } e ? this.close() : this.hiLightModal() }, _closeClick: function () { var i, s = !1, e = !1; if ("string" == typeof (i = "function" == typeof this.closeIcon ? this.closeIcon() : this.closeIcon) && t.isDefined(this.buttons[i]) ? (s = i, e = !1) : e = void 0 === i || 1 == !!i, s) { var n = this.buttons[s].action.apply(this, [this.scope, this.buttons[s]]); e = void 0 === n || 1 == !!n } e && this.close() }, _hilightAnimating: !1, _hilightClass: "ng-confirm-hilight", hiLightModal: function () { var t = this; this._hilightAnimating || (this._hilightAnimating = !0, this.$confirmBox.addClass(this._hilightClass), setTimeout(function () { t._hilightAnimating = !1, t.$confirmBox.removeClass(t._hilightClass) }, this.animationSpeed)) }, _buttonClick: function (t) { var i = this.buttons[t].action.apply(this, [this.scope, this.buttons[t]]); return "function" == typeof this.onAction && this.onAction.apply(this, [this.scope, t]), void 0 === i || i ? this.close() : this.scope.$apply(), i }, triggerButton: function (t) { return this._buttonClick(t) }, setDialogCenter: function (i) { i = i || "n/a"; var s = this.$content, e = s.outerHeight(), n = this.$contentPane.outerHeight(), o = s.children(); if (0 != o.length) { var a = parseInt(o.eq(0).css("margin-top")); a && (e += a) } var c = t.element(window).height(), l = this.$confirmBox.outerHeight(); if (0 != l) { var r, h = l - n + e; h > c - (this.offsetTop + this.offsetBottom) || !this.alignMiddle ? (r = { "margin-top": this.offsetTop, "margin-bottom": this.offsetBottom }, t.element("body").addClass("ng-confirm-no-scroll-" + this._id)) : (r = { "margin-top": (c - h) / 2, "margin-bottom": 0 }, t.element("body").removeClass("ng-confirm-no-scroll-" + this._id)), this.$contentPane.css({ height: e }).scrollTop(0), this.$confirmBox.css(r) } }, _getKey: function (t) { switch (t) { case 192: return "tilde"; case 13: return "enter"; case 16: return "shift"; case 9: return "tab"; case 20: return "capslock"; case 17: return "ctrl"; case 91: return "win"; case 18: return "alt"; case 27: return "esc" }var i = String.fromCharCode(t); return !!/^[A-z0-9]+$/.test(i) && i.toLowerCase() }, open: function () { var t = this; return this._prepare(), e(function () { t._open() }, 100), !0 }, _open: function () { var i = this; "function" == typeof this.onOpenBefore && this.onOpenBefore.apply(this, [this.scope]), t.element(this.container).append(this.$el), i.setDialogCenter("_open"), setTimeout(function () { i.$contentPane.css(i._getCSS(i.animationSpeed, 1)), i.$confirmBox.css(i._getCSS(i.animationSpeed, i.animationBounce)), i._removeAnimationClass(), i.$confirmBg.removeClass("ng-confirm-bg-h"), i.$confirmBox.focus(), setTimeout(function () { i._bindEvents(), i.$confirmBox.css(i._getCSS(i.animationSpeed, 1)), i._modalReady.resolve(), "function" == typeof i.onOpen && i.onOpen.apply(i, [i.scope]), i._startCountDown() }, i.animationSpeed) }, 100) }, _autoCloseKey: !1, _autoCloseInterval: 0, _startCountDown: function () { var i = this; if ("string" == typeof this.autoClose) { var s = this.autoClose.split("|"); if (2 == s.length) { this._autoCloseKey = s[0]; var e = s[1] / 1e3; if (t.isDefined(this.buttons[this._autoCloseKey])) { var n = t.element('<span class="ng-confirm-timer"></span>'); this.buttons[this._autoCloseKey].el.append(n), this._autoCloseInterval = setInterval(function () { var t = e ? " (" + --e + ")" : ""; n.html(t), e < 1 && (i._stopCountDown(), i._buttonClick(i._autoCloseKey)) }, 1e3) } else l.error('Auto close button "' + i._autoCloseKey + '" not defined.') } else l.error("Invalid option for autoClose. example 'close|10000'") } }, _stopCountDown: function () { this._autoCloseInterval && clearInterval(this._autoCloseInterval) }, closed: !1, isClosed: function () { return this.closed }, isOpen: function () { return !this.closed }, close: function () { var i = this; "function" == typeof this.onClose && this.onClose.apply(this, [this.scope]), this._unBindEvents(), this._stopCountDown(), this._setAnimationClass(this.closeAnimation), this.$confirmBg.addClass("ng-confirm-bg-h"); var s = .4 * this.animationSpeed; return setTimeout(function () { i.$el.remove(), i.closed = !0, i._providedScope || i.scope.$destroy(), "function" == typeof i.onDestroy && i.onDestroy.apply(i, [i.scope]), t.element("body").removeClass("ng-confirm-no-scroll-" + i._id), i._lastFocused.focus(), i = void 0 }, s), !0 } }, h }]) }(dnnsfAngular15);