/**
 * RWD Table with freezing head and columns for jQuery
 * 
 * @author  Nick Tsai <myintaer@gmail.com>
 * @version 1.3.0
 * @see     https://github.com/yidas/jquery-freeze-table
 */
!function (h, n) { "use strict"; function e(i, t) { return this.$tableWrapper = h(i).first(), this.options = t || {}, this.namespace = this.options.namespace || "freeze-table", this.callback, this.scrollBarHeight, this.shadow, this.fastMode, this.backgroundColor, this.scrollable, this.$table = this.$tableWrapper.children("table"), this.$container = void 0 !== this.options.container && this.options.container && h(this.options.container).length ? h(this.options.container) : h(n), this.$headTableWrap, this.$columnTableWrap, this.$columnHeadTableWrap, this.$scrollBarWrap, this.fixedNavbarHeight, this.isWindowScrollX = !1, this.headWrapClass = "clone-head-table-wrap", this.columnWrapClass = "clone-column-table-wrap", this.columnHeadWrapClass = "clone-column-head-table-wrap", this.scrollBarWrapClass = "clone-scroll-bar-wrap", this.init(), this } e.prototype.init = function () { if (!this.$table.length) throw "The element must contain a table dom"; if ("update" === this.options) this.destroy(), this.options = this.$tableWrapper.data("freeze-table-data"); else { if ("resize" === this.options) return this.options = this.$tableWrapper.data("freeze-table-data"), this.namespace = this.options.namespace || this.namespace, void this.resize(); this.$tableWrapper.data("freeze-table-data", this.options) } var i = this.options, t = void 0 === i.freezeHead || i.freezeHead, e = void 0 === i.freezeColumn || i.freezeColumn, s = void 0 === i.freezeColumnHead || i.freezeColumnHead, a = void 0 !== i.scrollBar && i.scrollBar, l = i.fixedNavbar || ".navbar-fixed-top", o = i.callback || null; this.namespace = this.options.namespace || this.namespace, this.scrollBarHeight = h.isNumeric(i.scrollBarHeight) ? i.scrollBarHeight : n.innerWidth - document.documentElement.clientWidth, this.shadow = void 0 !== i.shadow && i.shadow, this.fastMode = void 0 !== i.fastMode && i.fastMode, this.backgroundColor = void 0 !== i.backgroundColor ? i.backgroundColor : "white", this.scrollable = void 0 !== i.scrollable && i.scrollable, this.fixedNavbarHeight = l && h(l).outerHeight() || 0, this.isInit() && this.destroy(), this.scrollable || this.$tableWrapper.css("height", "100%").css("min-height", "100%").css("max-height", "100%"), t && this.buildHeadTable(), e && (this.buildColumnTable(), this.$tableWrapper.css("overflow-x", "auto")), s && t && e && this.buildColumnHeadTable(), a && this.buildScrollBar(); var r = function () { 0 < this.$container.scrollLeft() ? (this.isWindowScrollX = !0, this.$headTableWrap && this.$headTableWrap.css("visibility", "hidden"), this.$columnTableWrap && this.$columnTableWrap.css("visibility", "hidden"), this.$columnHeadTableWrap && this.$columnHeadTableWrap.css("visibility", "hidden"), this.$scrollBarWrap && this.$scrollBarWrap.css("visibility", "hidden")) : this.isWindowScrollX = !1 }.bind(this); this.$container.on("scroll." + this.namespace, function () { r() }), this.resize(), "function" == typeof o && o() }, e.prototype.buildHeadTable = function () { var e = this, i = this.clone(this.$table); if (this.fastMode) i = this.simplifyHead(i); var t = this.options.headWrapStyles || null; if (this.$headTableWrap = h('<div class="' + this.headWrapClass + '"></div>').append(i).css("position", "fixed").css("overflow", "hidden").css("visibility", "hidden").css("top", 0 + this.fixedNavbarHeight).css("z-index", 2), this.shadow && this.$headTableWrap.css("box-shadow", "0px 6px 10px -5px rgba(159, 159, 160, 0.8)"), t && "object" == typeof t && h.each(t, function (i, t) { e.$headTableWrap.css(i, t) }), this.$tableWrapper.append(this.$headTableWrap), this.$tableWrapper.on("scroll." + this.namespace, function () { e.$headTableWrap.scrollLeft(h(this).scrollLeft()) }), this.scrollable) { var s = function (i, t) { var e = t.$tableWrapper.offset().top; 0 < t.$tableWrapper.scrollTop() && e > t.fixedNavbarHeight ? (t.$headTableWrap.offset({ top: e }), t.$headTableWrap.css("visibility", "visible")) : t.$headTableWrap.css("visibility", "hidden") }; this.$tableWrapper.on("scroll." + this.namespace, function () { s(0, e) }), this.$container.on("scroll." + this.namespace, function () { s(0, e) }) } else h.isWindow(e.$container.get(0)) ? this.$container.on("scroll." + this.namespace, function () { var i = e.$container.scrollTop() + e.fixedNavbarHeight, t = e.$table.offset().top - 1; t - 1 <= i && t + e.$table.outerHeight() - 1 >= i ? e.$headTableWrap.css("visibility", "visible") : e.$headTableWrap.css("visibility", "hidden") }) : this.$container.on("scroll." + this.namespace, function () { var i = h(n).scrollTop(), t = e.$table.offset().top - 1; t <= i && t + e.$table.outerHeight() - 1 >= i ? (e.$headTableWrap.offset({ top: i }), e.$headTableWrap.css("visibility", "visible")) : e.$headTableWrap.css("visibility", "hidden") }); this.$container.on("resize." + this.namespace, function () { var i = e.scrollable ? e.$tableWrapper.width() - e.scrollBarHeight : e.$tableWrapper.width(); i = 0 < i ? i : e.$tableWrapper.width(), e.$headTableWrap.css("width", i), e.$headTableWrap.css("height", e.$table.find("thead").outerHeight()) }) }, e.prototype.buildColumnTable = function () { var s = this, i = this.options.columnWrapStyles || null, a = this.options.columnNum || 1, t = void 0 !== this.options.columnKeep && this.options.columnKeep, e = this.shadow ? 0 : 1, l = void 0 !== this.options.columnBorderWidth ? this.options.columnBorderWidth : e, o = this.clone(this.$table); if (this.$columnTableWrap = h('<div class="' + this.columnWrapClass + '"></div>').append(o).css("position", "fixed").css("overflow", "hidden").css("visibility", "hidden").css("z-index", 1), this.shadow && this.$columnTableWrap.css("box-shadow", "6px 0px 10px -5px rgba(159, 159, 160, 0.8)"), i && "object" == typeof i && h.each(i, function (i, t) { s.$columnTableWrap.css(i, t) }), this.scrollable) { var r = this.$tableWrapper.height() - this.scrollBarHeight; r = 0 < r ? r : this.$tableWrapper.height(), this.$columnTableWrap.height(r) } this.$tableWrapper.append(this.$columnTableWrap); function n() { s.$columnTableWrap.offset({ top: s.$tableWrapper.offset().top }) } t ? this.$columnTableWrap.css("visibility", "visible") : s.scrollable ? this.$tableWrapper.on("scroll." + this.namespace, function () { 0 < h(this).scrollLeft() ? (s.$columnTableWrap.scrollTop(s.$tableWrapper.scrollTop()), s.$columnTableWrap.css("visibility", "visible")) : s.$columnTableWrap.css("visibility", "hidden") }) : this.$tableWrapper.on("scroll." + this.namespace, function () { s.isWindowScrollX || (0 < h(this).scrollLeft() ? s.$columnTableWrap.css("visibility", "visible") : s.$columnTableWrap.css("visibility", "hidden")) }), this.$container.on("resize." + this.namespace, function () { o.width(s.$table.width()); for (var i = 0 + l, t = 1; t <= a; t++) { var e = s.$table.find("th:nth-child(" + t + ")").outerWidth(); i += 0 < e ? e : s.$table.find("td:nth-child(" + t + ")").outerWidth() } s.$columnTableWrap.width(i), n() }), this.$container.on("scroll." + this.namespace, function () { n() }) }, e.prototype.buildColumnHeadTable = function () { var e = this; this.$columnHeadTableWrap = this.clone(this.$headTableWrap), this.fastMode && (this.$columnHeadTableWrap = this.simplifyHead(this.$columnHeadTableWrap)); var i = this.options.columnHeadWrapStyles || null; if (this.$columnHeadTableWrap.removeClass(this.namespace).addClass(this.columnHeadWrapClass).css("z-index", 3), this.shadow && this.$columnHeadTableWrap.css("box-shadow", "none"), i && "object" == typeof i && h.each(i, function (i, t) { this.$columnHeadTableWrap.css(i, t) }), this.$tableWrapper.append(this.$columnHeadTableWrap), this.scrollable) { var t = function () { var i = e.$tableWrapper.offset().top; 0 < e.$tableWrapper.scrollTop() && i > e.fixedNavbarHeight ? (e.$columnHeadTableWrap.offset({ top: i }), e.$columnHeadTableWrap.css("visibility", "visible")) : e.$columnHeadTableWrap.css("visibility", "hidden") }; h(this.$tableWrapper).on("scroll." + this.namespace, function () { t() }) } else if (h.isWindow(this.$container.get(0))) t = function () { var i = e.$container.scrollTop() + e.fixedNavbarHeight, t = e.$table.offset().top - 1; t - 1 <= i && t + e.$table.outerHeight() - 1 >= i && 0 < e.$tableWrapper.scrollLeft() ? e.$columnHeadTableWrap.css("visibility", "visible") : e.$columnHeadTableWrap.css("visibility", "hidden") }; else t = function () { var i = h(n).scrollTop(), t = e.$table.offset().top - 1; t <= i && t + e.$table.outerHeight() - 1 >= i && 0 < e.$tableWrapper.scrollLeft() ? (e.$columnHeadTableWrap.offset({ top: i }), e.$columnHeadTableWrap.css("visibility", "visible")) : e.$columnHeadTableWrap.css("visibility", "hidden") }; this.$container.on("scroll." + this.namespace, function () { t() }), this.$tableWrapper.on("scroll." + this.namespace, function () { e.isWindowScrollX || t() }), this.$container.on("resize." + this.namespace, function () { e.$columnHeadTableWrap.find("> table").css("width", e.$table.width()), e.$columnHeadTableWrap.css("width", e.$columnTableWrap.width()), e.$columnHeadTableWrap.css("height", e.$table.find("thead").outerHeight()) }) }, e.prototype.buildScrollBar = function () { var t = this, e = this.$table.find("thead").outerHeight(), i = h('<div class="' + this.scrollBarWrapClass + '"></div>').css("width", this.$table.width()).css("height", 1); this.$scrollBarWrap = h('<div class="' + this.scrollBarWrapClass + '"></div>').css("position", "fixed").css("overflow-x", "auto").css("visibility", "hidden").css("bottom", 0).css("z-index", 2).css("width", this.$tableWrapper.width()).css("height", this.scrollBarHeight), this.$scrollBarWrap.append(i), this.$tableWrapper.append(this.$scrollBarWrap), this.$scrollBarWrap.on("scroll." + this.namespace, function () { t.$tableWrapper.scrollLeft(h(this).scrollLeft()) }), this.$tableWrapper.on("scroll." + this.namespace, function () { t.$scrollBarWrap.scrollLeft(h(this).scrollLeft()) }), this.$container.on("scroll." + this.namespace, function () { var i = t.$container.scrollTop() + t.$container.height() - e + t.fixedNavbarHeight; t.$table.offset().top - 1 <= i && t.$table.offset().top + t.$table.outerHeight() - 1 >= i ? t.$scrollBarWrap.css("visibility", "visible") : t.$scrollBarWrap.css("visibility", "hidden") }), this.$container.on("resize." + this.namespace, function () { i.css("width", t.$table.width()), t.$scrollBarWrap.css("width", t.$tableWrapper.width()) }) }, e.prototype.clone = function (i) { var t = h(i).clone().removeAttr("id"); return this.backgroundColor && t.css("background-color", this.backgroundColor), t }, e.prototype.simplifyHead = function (i) { var s = this, t = h(i); return t.find("> tr, > tbody > tr, tfoot > tr").not(":first").remove(), h.each(t.find("> thead > tr:nth-child(1) >"), function (i, t) { var e = s.$table.find("> thead > tr:nth-child(1) > :nth-child(" + parseInt(i + 1) + ")").outerWidth(); h(this).css("width", e) }), t }, e.prototype.isInit = function () { return !!this.$tableWrapper.find("." + this.headWrapClass).length || (!!this.$tableWrapper.find("." + this.columnWrapClass).length || (!!this.$tableWrapper.find("." + this.columnHeadWrapClass).length || !!this.$tableWrapper.find("." + this.scrollBarWrapClass).length)) }, e.prototype.unbind = function () { this.$container.off("resize." + this.namespace), this.$container.off("scroll." + this.namespace), this.$tableWrapper.off("scroll." + this.namespace) }, e.prototype.destroy = function () { this.unbind(), this.$tableWrapper.find("." + this.headWrapClass).remove(), this.$tableWrapper.find("." + this.columnWrapClass).remove(), this.$tableWrapper.find("." + this.columnHeadWrapClass).remove(), this.$tableWrapper.find("." + this.scrollBarWrapClass).remove() }, e.prototype.resize = function () { return this.$container.trigger("resize." + this.namespace), this.$container.trigger("scroll." + this.namespace), this.$tableWrapper.trigger("scroll." + this.namespace), !0 }, e.prototype.update = function () { return this.options = "update", this.init(), this }, n.FreezeTable = e, h.fn.freezeTable = function (i) { if (1 === this.length) return new e(this, i); if (1 < this.length) { var t = []; return this.each(function () { t.push(new e(this, i)) }), t } return !1 } }(jQuery, window);